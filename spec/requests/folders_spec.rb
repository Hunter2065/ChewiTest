 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/folders", type: :request do

  # Folder. As you add validations to Folder, be sure to
  # adjust the attributes here as well.
  let!(:valid_test_folder) { Folder.create(name: 'Root') }
  let(:valid_attributes) do
    { name: 'test', folder_id: valid_test_folder.id }
  end
  let(:valid_params) do
    { name: 'test', parent_name: valid_test_folder.name }
  end

  let(:invalid_attributes) do
    { name: '', parent_name: valid_test_folder.name }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Folder.create! valid_attributes
      get folders_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      folder = Folder.create! valid_attributes
      get folder_url(folder)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_folder_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      folder = Folder.create! valid_attributes
      get edit_folder_url(folder)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Folder" do
        expect {
          post folders_url, params: { folder: valid_params }
        }.to change(Folder, :count).by(1)
      end

      it "redirects to the created folder" do
        post folders_url, params: { folder: valid_params }
        expect(response).to redirect_to(folder_url(Folder.last))
      end

      context 'with JSON format' do
        it 'creates a new Folder' do
          expect {
            post folders_url, params: { folder: valid_params, format: :json }
          }.to change(Folder, :count).by(1)

          expect(response).to be_created
        end
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Folder' do
        expect {
          post folders_url, params: { folder: invalid_attributes }
        }.to change(Folder, :count).by(0)

        expect(response).to be_unprocessable
      end

      context 'with JSON format' do
        it 'does not create a new Folder' do
          expect {
            post folders_url, params: { folder: invalid_attributes, format: :json}
          }.to change(Folder, :count).by(0)

          expect(response).not_to be_created
        end
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { name: 'test', parent_id: valid_test_folder.id }
      end

      it "updates the requested folder" do
        folder = Folder.create! valid_attributes

        expect do
          patch folder_url(folder), params: { folder: new_attributes }

          folder.reload
        end.to change(folder, :updated_at)
      end

      it "redirects to the folder" do
        folder = Folder.create! valid_attributes
        patch folder_url(folder), params: { folder: new_attributes }
        folder.reload
        expect(response).to redirect_to(folder_url(folder))
      end

      context 'with JSON format' do
        it 'updates the requested folder' do
          folder = Folder.create! valid_attributes

          expect do
            patch folder_url(folder), params: { folder: new_attributes, format: :json}

            folder.reload
          end.to change(folder, :updated_at)

          expect(response).to be_successful
        end
      end
    end

    context 'with invalid parameters' do
      it 'shouldn\'t update the folder' do
        folder = Folder.create! valid_attributes

        patch folder_url(folder), params: { folder: invalid_attributes }

        expect(response).to be_unprocessable
      end

      context 'with JSON format' do
        it 'shouldn\'t update the folder' do
          folder = Folder.create! valid_attributes

          patch folder_url(folder), params: { folder: invalid_attributes, format: :json }

          expect(response).to be_unprocessable
        end
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested folder" do
      folder = Folder.create! valid_attributes
      expect {
        delete folder_url(folder)
      }.to change(Folder, :count).by(-1)
    end

    it "redirects to the folders list" do
      folder = Folder.create! valid_attributes
      delete folder_url(folder)
      expect(response).to redirect_to(folders_url)
    end

    context 'with JSON format' do
      it "destroys the requested folder" do
        folder = Folder.create! valid_attributes

        expect {
          delete folder_url(folder), params: { format: :json }
        }.to change(Folder, :count).by(-1)
      end
    end
  end
end
